{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/socket/react-pong/src/components/PongGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './PongGame.css';\nimport Area from './utils/Area';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PongGame = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const ball = {\n    x: 0,\n    y: 0,\n    radius: 10\n  }; // Coordonnées de la balle et son rayon\n\n  var socket;\n  if (!socket) useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Établir une connexion WebSocket avec le serveur\n    const newSocket = io('http://localhost:8001'); // Remplacez par l'URL du serveur WebSocket\n\n    // Gérer les messages reçus du serveur\n    newSocket.on('message', data => {\n      console.log(data);\n    });\n    setSocket(newSocket);\n    const area = new Area(canvas.width, canvas.height, 1, 2);\n\n    // Fonction de dessin\n    const draw = () => {\n      // Effacer le contenu du canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Dessiner une ligne noire autour du canvas pour la bordure\n      ctx.strokeStyle = 'black';\n      ctx.lineWidth = 1;\n      ctx.strokeRect(0, 0, canvas.width, canvas.height);\n\n      // Dessiner le milieu du terrain (ligne au milieu)\n      ctx.beginPath();\n      ctx.moveTo(canvas.width / 2, 0);\n      ctx.lineTo(canvas.width / 2, canvas.height);\n      ctx.stroke();\n      const player = area.getPlayer();\n      const opponent = area.getOpponent();\n      const ballEntity = area.getBall();\n      const racketSize = area.racketSize();\n      const ballSize = area.ballSize();\n\n      // Log des valeurs de la raquette du joueur\n      console.log('Player Y:', player.getLocation().getY());\n      console.log('Racket Width:', racketSize.width);\n      console.log('Racket Height:', racketSize.height);\n\n      // Log des valeurs de la raquette de l'opposant\n      console.log('Opponent Y:', opponent.getLocation().getY());\n\n      // Log des valeurs de la balle\n      console.log('Ball Y:', ballEntity.getLocation().getY());\n      console.log('Ball Width:', ballSize.width);\n\n      // Dessiner les raquettes et la balle en utilisant les données de Area\n      ctx.fillRect(player.getLocation().getX(), player.getLocation().getY(), racketSize.width, racketSize.height);\n      ctx.fillRect(opponent.getLocation().getX(), opponent.getLocation().getY(), racketSize.width, racketSize.height);\n      ctx.beginPath();\n      ctx.arc(ballEntity.getLocation().getX(), ballEntity.getLocation().getY(), ballSize.width / 2, 0, Math.PI * 2);\n      ctx.fillStyle = 'black'; // Couleur de la balle\n      ctx.fill();\n    };\n\n    // Appeler la fonction de dessin\n    draw();\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, [socket]);\n\n  // Gérer les mouvements de la raquette du client\n  const handleRacketMovement = percent => {\n    if (socket) {\n      socket.emit('racketMovement', percent); // Envoyer le pourcentage au serveur\n    }\n  };\n\n  if (socket) {\n    // Écouter les mises à jour des raquettes des autres joueurs\n    socket.on('racketMoved', percent => {\n      // Mettez à jour l'affichage avec la nouvelle position de la raquette de l'adversaire\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centered-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score\",\n      children: \"Nom 1------0 - 2-----Nom 2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 800,\n      height: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(PongGame, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = PongGame;\nexport default PongGame;\nvar _c;\n$RefreshReg$(_c, \"PongGame\");","map":{"version":3,"names":["React","useEffect","useRef","Area","io","jsxDEV","_jsxDEV","PongGame","_s","canvasRef","ball","x","y","radius","socket","canvas","current","ctx","getContext","newSocket","on","data","console","log","setSocket","area","width","height","draw","clearRect","strokeStyle","lineWidth","strokeRect","beginPath","moveTo","lineTo","stroke","player","getPlayer","opponent","getOpponent","ballEntity","getBall","racketSize","ballSize","getLocation","getY","fillRect","getX","arc","Math","PI","fillStyle","fill","disconnect","handleRacketMovement","percent","emit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/stan/Desktop/socket/react-pong/src/components/PongGame.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './PongGame.css';\nimport Area from './utils/Area';\nimport io from 'socket.io-client';\n\nconst PongGame: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const ball = { x: 0, y: 0, radius: 10 }; // Coordonnées de la balle et son rayon\n\n    var socket;\n  if (!socket)\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Établir une connexion WebSocket avec le serveur\n    const newSocket = io('http://localhost:8001'); // Remplacez par l'URL du serveur WebSocket\n\n    // Gérer les messages reçus du serveur\n    newSocket.on('message', (data) => {\n      console.log(data);\n    });\n\n    setSocket(newSocket);\n\n\n    const area = new Area(canvas.width, canvas.height, 1, 2);\n\n    // Fonction de dessin\n    const draw = () => {\n      \n      // Effacer le contenu du canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Dessiner une ligne noire autour du canvas pour la bordure\n      ctx.strokeStyle = 'black';\n      ctx.lineWidth = 1;\n      ctx.strokeRect(0, 0, canvas.width, canvas.height);\n\n      // Dessiner le milieu du terrain (ligne au milieu)\n      ctx.beginPath();\n      ctx.moveTo(canvas.width / 2, 0);\n      ctx.lineTo(canvas.width / 2, canvas.height);\n      ctx.stroke();\n\n      const player = area.getPlayer();\n      const opponent = area.getOpponent();\n      const ballEntity = area.getBall();\n      const racketSize = area.racketSize();\n      const ballSize = area.ballSize();\n\n\n      // Log des valeurs de la raquette du joueur\n      console.log('Player Y:', player.getLocation().getY());\n      console.log('Racket Width:', racketSize.width);\n      console.log('Racket Height:', racketSize.height);\n      \n      // Log des valeurs de la raquette de l'opposant\n      console.log('Opponent Y:', opponent.getLocation().getY());\n      \n      // Log des valeurs de la balle\n      console.log('Ball Y:', ballEntity.getLocation().getY());\n      console.log('Ball Width:', ballSize.width);\n\n      // Dessiner les raquettes et la balle en utilisant les données de Area\n      ctx.fillRect(player.getLocation().getX(), player.getLocation().getY(), racketSize.width, racketSize.height);\n      ctx.fillRect(opponent.getLocation().getX(), opponent.getLocation().getY(), racketSize.width, racketSize.height);\n      ctx.beginPath();\n      ctx.arc(ballEntity.getLocation().getX(), ballEntity.getLocation().getY(), ballSize.width / 2, 0, Math.PI * 2);\n      ctx.fillStyle = 'black'; // Couleur de la balle\n      ctx.fill();\n    };\n\n    // Appeler la fonction de dessin\n    draw();\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, [socket]);\n\n  // Gérer les mouvements de la raquette du client\n  const handleRacketMovement = (percent: number) => {\n    if (socket) {\n      socket.emit('racketMovement', percent); // Envoyer le pourcentage au serveur\n    }\n  };\n\n  if (socket) {\n    // Écouter les mises à jour des raquettes des autres joueurs\n    socket.on('racketMoved', (percent: number) => {\n      // Mettez à jour l'affichage avec la nouvelle position de la raquette de l'adversaire\n    });\n  }\n  return (\n    <div className=\"centered-container\">\n      <div className=\"score\">\n        Nom 1------0 - 2-----Nom 2\n      </div>\n      <canvas ref={canvasRef} width={800} height={400} />\n    </div>\n  );\n};\n\nexport default PongGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}