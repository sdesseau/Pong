{"ast":null,"code":"export class Scaled {\n  constructor(arg1, max) {\n    this.percent = void 0;\n    this.min = void 0;\n    this.max = void 0;\n    if (typeof arg1 === \"number\" && typeof max === \"number\") {\n      // Constructeur avec min et max en arguments\n      this.min = arg1;\n      this.max = max;\n      this.percent = 0;\n    } else if (arg1 instanceof Scaled) {\n      // Constructeur avec un autre objet Scaled en argument\n      const other = arg1;\n      this.min = other.min;\n      this.max = other.max;\n      this.percent = other.percent;\n    } else {\n      throw new Error(\"Invalid constructor arguments\");\n    }\n  }\n  getMin() {\n    return this.min;\n  }\n  getMax() {\n    return this.max;\n  }\n  getValue() {\n    return this.valueFor(this.percent);\n  }\n  valueFor(percent) {\n    if (percent < 0 || percent > 100) {\n      throw new Error(\"Percent value must be between 0 and 100\");\n    }\n    return Math.round(this.min + (this.max - this.min) * (percent / 100));\n  }\n  percentFor(value) {\n    if (value < this.min || value > this.max) {\n      throw new Error(\"Value must be between min and max\");\n    }\n    return Math.round((value - this.min) / (this.max - this.min) * 100);\n  }\n  add(percentToAdd) {\n    this.percent += percentToAdd;\n    if (this.percent < 0) {\n      this.percent = 0;\n    }\n    if (this.percent > 100) {\n      this.percent = 100;\n    }\n  }\n  remove(percentToRemove) {\n    this.percent -= percentToRemove;\n    if (this.percent < 0) {\n      this.percent = 0;\n    }\n    if (this.percent > 100) {\n      this.percent = 100;\n    }\n  }\n  getPercent() {\n    return this.percent;\n  }\n  setPercent(percent) {\n    if (percent >= 0 && percent <= 100) {\n      this.percent = percent;\n    } else {\n      throw new Error(\"Percent value must be between 0 and 100\");\n    }\n    return this;\n  }\n}","map":{"version":3,"names":["Scaled","constructor","arg1","max","percent","min","other","Error","getMin","getMax","getValue","valueFor","Math","round","percentFor","value","add","percentToAdd","remove","percentToRemove","getPercent","setPercent"],"sources":["/Users/stan/Desktop/socket/react-pong/src/components/utils/Scaled.tsx"],"sourcesContent":["export class Scaled {\n    private percent: number;\n    private readonly min: number;\n    private readonly max: number;\n  \n    constructor(min: number, max: number);\n    constructor(other: Scaled);\n\n    constructor(arg1: number | Scaled, max?: number) {\n        if (typeof arg1 === \"number\" && typeof max === \"number\")\n        {\n            // Constructeur avec min et max en arguments\n            this.min = arg1;\n            this.max = max;\n            this.percent = 0;\n        }\n        else if (arg1 instanceof Scaled) {\n            // Constructeur avec un autre objet Scaled en argument\n            const other = arg1 as Scaled;\n            this.min = other.min;\n            this.max = other.max;\n            this.percent = other.percent;\n        } else {\n            throw new Error(\"Invalid constructor arguments\");\n        }\n    }\n    getMin(): number {\n      return this.min;\n    }\n  \n    getMax(): number {\n      return this.max;\n    }\n  \n    getValue(): number {\n      return this.valueFor(this.percent);\n    }\n  \n    valueFor(percent: number): number {\n      if (percent < 0 || percent > 100) {\n        throw new Error(\"Percent value must be between 0 and 100\");\n      }\n      return Math.round(this.min + ((this.max - this.min) * (percent / 100)));\n    }\n  \n    percentFor(value: number): number {\n      if (value < this.min || value > this.max) {\n        throw new Error(\"Value must be between min and max\");\n      }\n      return Math.round(((value - this.min) / (this.max - this.min)) * 100);\n    }\n  \n    add(percentToAdd: number) {\n      this.percent += percentToAdd;\n      if (this.percent < 0) {\n        this.percent = 0;\n      }\n      if (this.percent > 100) {\n        this.percent = 100;\n      }\n    }\n  \n    remove(percentToRemove: number) {\n      this.percent -= percentToRemove;\n      if (this.percent < 0) {\n        this.percent = 0;\n      }\n      if (this.percent > 100) {\n        this.percent = 100;\n      }\n    }\n  \n    getPercent(): number {\n      return this.percent;\n    }\n  \n    setPercent(percent: number): Scaled {\n      if (percent >= 0 && percent <= 100) {\n        this.percent = percent;\n      } else {\n        throw new Error(\"Percent value must be between 0 and 100\");\n      }\n      return this;\n    }\n  }"],"mappings":"AAAA,OAAO,MAAMA,MAAM,CAAC;EAQhBC,WAAWA,CAACC,IAAqB,EAAEC,GAAY,EAAE;IAAA,KAPzCC,OAAO;IAAA,KACEC,GAAG;IAAA,KACHF,GAAG;IAMhB,IAAI,OAAOD,IAAI,KAAK,QAAQ,IAAI,OAAOC,GAAG,KAAK,QAAQ,EACvD;MACI;MACA,IAAI,CAACE,GAAG,GAAGH,IAAI;MACf,IAAI,CAACC,GAAG,GAAGA,GAAG;MACd,IAAI,CAACC,OAAO,GAAG,CAAC;IACpB,CAAC,MACI,IAAIF,IAAI,YAAYF,MAAM,EAAE;MAC7B;MACA,MAAMM,KAAK,GAAGJ,IAAc;MAC5B,IAAI,CAACG,GAAG,GAAGC,KAAK,CAACD,GAAG;MACpB,IAAI,CAACF,GAAG,GAAGG,KAAK,CAACH,GAAG;MACpB,IAAI,CAACC,OAAO,GAAGE,KAAK,CAACF,OAAO;IAChC,CAAC,MAAM;MACH,MAAM,IAAIG,KAAK,CAAC,+BAA+B,CAAC;IACpD;EACJ;EACAC,MAAMA,CAAA,EAAW;IACf,OAAO,IAAI,CAACH,GAAG;EACjB;EAEAI,MAAMA,CAAA,EAAW;IACf,OAAO,IAAI,CAACN,GAAG;EACjB;EAEAO,QAAQA,CAAA,EAAW;IACjB,OAAO,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACP,OAAO,CAAC;EACpC;EAEAO,QAAQA,CAACP,OAAe,EAAU;IAChC,IAAIA,OAAO,GAAG,CAAC,IAAIA,OAAO,GAAG,GAAG,EAAE;MAChC,MAAM,IAAIG,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IACA,OAAOK,IAAI,CAACC,KAAK,CAAC,IAAI,CAACR,GAAG,GAAI,CAAC,IAAI,CAACF,GAAG,GAAG,IAAI,CAACE,GAAG,KAAKD,OAAO,GAAG,GAAG,CAAE,CAAC;EACzE;EAEAU,UAAUA,CAACC,KAAa,EAAU;IAChC,IAAIA,KAAK,GAAG,IAAI,CAACV,GAAG,IAAIU,KAAK,GAAG,IAAI,CAACZ,GAAG,EAAE;MACxC,MAAM,IAAII,KAAK,CAAC,mCAAmC,CAAC;IACtD;IACA,OAAOK,IAAI,CAACC,KAAK,CAAE,CAACE,KAAK,GAAG,IAAI,CAACV,GAAG,KAAK,IAAI,CAACF,GAAG,GAAG,IAAI,CAACE,GAAG,CAAC,GAAI,GAAG,CAAC;EACvE;EAEAW,GAAGA,CAACC,YAAoB,EAAE;IACxB,IAAI,CAACb,OAAO,IAAIa,YAAY;IAC5B,IAAI,IAAI,CAACb,OAAO,GAAG,CAAC,EAAE;MACpB,IAAI,CAACA,OAAO,GAAG,CAAC;IAClB;IACA,IAAI,IAAI,CAACA,OAAO,GAAG,GAAG,EAAE;MACtB,IAAI,CAACA,OAAO,GAAG,GAAG;IACpB;EACF;EAEAc,MAAMA,CAACC,eAAuB,EAAE;IAC9B,IAAI,CAACf,OAAO,IAAIe,eAAe;IAC/B,IAAI,IAAI,CAACf,OAAO,GAAG,CAAC,EAAE;MACpB,IAAI,CAACA,OAAO,GAAG,CAAC;IAClB;IACA,IAAI,IAAI,CAACA,OAAO,GAAG,GAAG,EAAE;MACtB,IAAI,CAACA,OAAO,GAAG,GAAG;IACpB;EACF;EAEAgB,UAAUA,CAAA,EAAW;IACnB,OAAO,IAAI,CAAChB,OAAO;EACrB;EAEAiB,UAAUA,CAACjB,OAAe,EAAU;IAClC,IAAIA,OAAO,IAAI,CAAC,IAAIA,OAAO,IAAI,GAAG,EAAE;MAClC,IAAI,CAACA,OAAO,GAAGA,OAAO;IACxB,CAAC,MAAM;MACL,MAAM,IAAIG,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IACA,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}